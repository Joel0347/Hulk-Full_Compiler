// // KENDRY TODO ESTO TIENE QUE PINCHAR
let w = 2 == 3 & !(3<4), x = 1+2, z = exp(x) in {
    print(x-2);
    print(w);
    print(x);
    print(z);
    print(1);
    print(log(E));
    print(log(2, x));
    print(cos(PI/2));
    print(sin(PI));
    print(exp(2) + z);
    print(sqrt(z));
    print(rand());
};

let p="JOEL"@@ {
    "PONTE\t\\\\"@ {
            2;
            "A PINCHAR QUE SINO EL BARCA\nNO GANA LA SEXTA \n";
        };
    },x = 2 in {
    print(p);
    // p:Number := 3;
    // let a = 2+x in a + p;
};
let
    x: Boolean = true,
    y: Boolean = false
in {
    print(x&y);
};

f(1, "Ads");

function f(x:Number, y) {
    let t = 1 in
        x @ y  @ t;
}
{
    function h(x, y) {
        g(x, y);
    }
    h(2, 2@"");
}
function g(x, y:String) {
    f(x, y);
}

// function test1(x, y:Object): Number => k(x, y);
// function test2(x: Number, y:String) => {
//     test1(x, y); //test2 debe saber que retorna Void o lo que sea que retorne test1
// };

// function k(x, y:Object) {
//     test2(test1(x, y), x); // no infiere que y es string
// }
// k(2);

// test1(2,3) @ 1;
// test2(2, "sad") + 1;

function cot(x) => 1 / tan(x);
function tan(x) => sin(x) / cos(x);

print(tan(PI)^2 + cot(PI)^2);

function operate(x, y) {
    print(x + y);
    print(x - y);
    print(x * y);
    print(x / y);
}

let msg = "Hello World" in print(msg);
let number = 42, text = "The meaning of life is" in print(text@@number);
let number = 42, text = "The meaning of life is " in print(text@number);
let number = 42 in (
    let text = "The meaning of life is " in (
        print(text@number)
    )
);

let a = 6, b = a * 7 in print(b);
let a = 6 in
    let b = a * 7 in
        print(b);
let a = 5, b = 10, c = 20 in {
    print(a+b);
    print(b*c);
    print(c/a);
};
let a = (let b = 6 in b * 7) in print(a);
print(let b = 6 in b * 7);
let a = 20 in {
    let a = 42 in print(a); //imprime 42
    print(a); //imprime 20
};
let a = true, a = 7 * 6 in print(a + 1); //imprime 43
let a = 7 in
    let a = 7 * 6 in
        print(a); //imprime 42
let a = 0 in {
    print(a); //imprime 0
    a := 1;
    print(a); // imprime 1
};
let a = 0 in
    let b = a := 1 in {
        print(a); //imprime 1
        print(b); //imprime 1
    };
// function hola(x, y) { //revisar parametros con igual nombre
//     let x = 1, x = true in {
//         x := {y;}; //revisar este caso extremo (unificar tambien a quien depende de mi conmigo)
//         // y := x;
//         1 - y;;
//     };
// }

// function suc() => {};
// suc()+1;
// print(hola(12, 2));

// function g(x:Number):Number => f(x);
// function f(x:Number):Number => f(x);

// print(f(3));

// if (3<1) {
// 	5;
// } elif (3 < 5) {
// 	4;
// } elif (false) {

// } elif (3 < 8) {

// } else {
// 	3;
// }
// let msg = "Hello World" in print(msg);
// let number = 42, text = "The meaning of life is" in print(text@@number);
// let number = 42, text = "The meaning of life is " in print(text@number);
// let number = 42 in (
//     let text = "The meaning of life is " in (
//         print(text@number)
//     )
// );

// let a = 6, b = a * 7 in print(b);
// let a = 6 in
//     let b = a * 7 in
//         print(b);
// let a = 5, b = 10, c = 20 in {
//     print(a+b);
//     print(b*c);
//     print(c/a);
// };
// let a = (let b = 6 in b * 7) in print(a);
// print(let b = 6 in b * 7);
// let a = 20 in {
//     let a = 42 in print(a); //imprime 42
//     print(a); //imprime 20
// };
// let a = true, a = 7 * 6 in print(a + 1); //imprime 43
// let a = 7 in
//     let a = 7 * 6 in
//         print(a); //imprime 42
// let a = 0 in {
//     print(a); //imprime 0
//     a := 1;
//     print(a); // imprime 1
// };
// let a = 0 in
//     let b = a := 1 in {
//         print(a); //imprime 1
//         print(b); //imprime 1
//     };
// // function hola(x, y) { //revisar parametros con igual nombre
// //     let x = 1, x = true in {
// //         x := {y;}; //revisar este caso extremo (unificar tambien a quien depende de mi conmigo)
// //         // y := x;
// //         1 - y;;
// //     };
// // }

// // function suc() => {};
// // suc()+1;
// // print(hola(12, 2));

// // function g(x:Number):Number => f(x);
// // function f(x:Number):Number => f(x);

// // print(f(3));
// type Point(x:Number, y:Number) {
//     x = x;
//     y = y;
//     // getX(): Number => self.x;
//     // getY(): Number => self.y;
//     // setX(x) => self.x := x;
//     // setY(y) => self.y := y;
// }

// if (3>1) {
// 	print("hola");
// } elif (3 > 5) {
// 	4;
// } elif (true) {
//     let pt:Point = new Point(3, 4) in {pt;};
// } elif (3 < 8) {
//     3;
// } else {
// 	3;
// }
// let x:String ="2" in {x is Number;};
// // // function test1(x) {
// // //     function test2(y) {
// // //         x + y;
// // //     }
// // //     x + test2(x);
// // // }
// // let x:Void = {} in x;
// function fib(n) {
//     if (n == 0 | n == 1)
//         1
//     else
//         fib(n-1) + fib(n-2)
// function test1(x) {
//     function test2(y) {
//         x + y;
//     }
//     x + test2(x);
// }
let x:Void = {} in x;
function fib(n) {
    if (n == 0 | n == 1)
        1
    else
        fib(n-1) + fib(n-2)
}
let a = fib(5) in print("fibonacci"@@fib(a));
// let x:Number = if (false) 3 in x;
// fib("As")@1;

// function test3(n) {
//     if (test3(n))
//         n
//     elif (false)
//         test3(n+1)+1
//     else test3(n)+1;
// }

// test3("AS")@1;

function fact(n) {
    if (n == 1 | n == 0)
        1
    else 
        fact(n-1) * n;
    // function l(m) => let i = 1, total = 1 in while (i <= m) {
    //     total *= i;
    //     i += 1;
    //     total;
    // };
    // l(n);
}

print("factorial de 4:"@@fact(4));

// fact(4);

let i = 0 in while (i<4) {
    print("hola");
    i += 1;
};
// let i =1, p = i+=2<1 in print(p+i);
// function j(x) {
//     let i = 1 in while (true) {
//         print(i);
//         i += x;
//     };
// }

// j("as");
// j(2);
function d(x) => x+1;
d(2);

// let x=5, y=7 in {
//     function test(l){
        
//         l+x;
//     }
//     print (test(2));
// };
// let i = 1 in while (true) {
//     print(i);
//     i += x;
// };
// let t=1 in {
//     function key() => t + 1;
//     function ch() => t := 1;

//     ch();
//     key();
// };
// function r(x) {
//     function o(y) {
//         x + y;
//     }
//     o(x);
// }

// type A inherits C {
//     // x=y+1;
//     // y=x;
//     // x:B = new B();
//     g() => 1;
// }

// type B inherits A {
//     // x: A = new A();
//     // setX() => self.x+1;
// }

// type C inherits B {

// }

// type Point inherits p {
//     x = x;
//     y = y;
    
//     // // getY(x:p): p => (new p(2, 3)); //revisar tipado ahora
//     // // l=new PolarPoint(2,3);
//     // z = 1;

//     // setX(x) => self.x := x;
//     getX(x) {
//         base(x)@"AS";
//     }
//     setY(y) => self.y := y;
// }

// let pt:Point = new Point(1, 4) in pt.getX(2);

// type PolarPoint(phi, rho) inherits Point(rho * sin(phi), rho * cos(phi)) {
//     g() => phi+1;
//     // k() => self.z;
//     // get() => self.getX();
// }

// type p(x, y:Number) {
//     j = x;
//     k: p = new p(2,3);
//     getX(k) => self.j:=k+1;
//     gc() => self.getX(2);
//     k() => self.gc()+1;
// }

// type p(x, y:Number) {
//     j = x;
//     k: Point = new PolarPoint(2,3);
//     getX(k) => self.j:=k+1;
//     gc() => self.getX(2);
//     k() => self.gc()+1;
// }

// function l(x): Number => x;
// type p {
//     h() => self.g()@1;
//     g() => 2;
// }

// new PolarPoint("12", "4");

// function even(x:Number): Boolean {
//     if (x == 0) true
//     elif (x == 1) false
//     else odd(x - 1);
// }

// function odd(x:Number): Boolean {
//     if (x == 0) false
//     elif (x == 1) true
//     else even(x - 1);
// }

// print(odd(7));

// type Point(x:Number, y:Number) {
//     x = x;
//     y = y;
//     getX() => print("LOL");
//     // getY(): Number => self.y;
//     // setX(x) => self.x := x;
//     // setY(y) => self.y := y;
// }

// let pt:Point = new Point(3, 4) in // imprime: x: 3; y: 4
//     pt.getX();

// type PolarPoint inherits Point {
//     rho() => sqrt(self.getX()^2 + self.getY()^2);
// }

// let pt = new PolarPoint(3, 4) in // imprime: rho: 5
//     print("rho: " @ pt.rho());

// type PolarPoint2(phi, rho) inherits Point(rho * sin(phi), rho * cos(phi)) { }

// let pt = new PolarPoint2(3, 4) in {
//     print("x: " @ pt.getX());
//     print("y: " @ pt.getY());
// };

// type Person(firstName: String, lastName: String) {
//     firstName = firstName;
//     lastName = lastName;
//     name() => self.firstName @@ self.lastName;
// }

// type Knight inherits Person {
//     name() => "Sir" @@ base();
// }

// let p: Person = new Knight("Phil", "Collins") in
//     print(p.name()); // imprime: Sir Phil Collins


// function l(y, x:p) {
//     x.getX(y);
// 	y.getY();
// }

// type p inherits b {
// 	getX(x) => x.getY();
// }

// type d inherits c {
// 	getX() => 2;
// }

// type b inherits c {
// 	getX() => 1;
// 	getY() => 2;
// }

type b inherits c {}
type c {
	// getX() => 1;
}
let x = new b() in if (x is c) x as c else {};


// l("2", 2);

// function l(x) => for (i in range(x)) i+1;
// l("asd");
// function f(x) {
// 	x := if (false) new A();
// 	if?(x) {
// 		2;
// 	} else {
// 		x.g() + 1;
// 	};
// 	// let total = 0 in for (i in range(12, x)) {
// 	// 	total += i;
// 	// };
// }

// type A { x = if (false) 1; g() {if?(self.x) self.x else self.x} }
// function f(x) {
// 	x := if (false) new A();
// 	if?(x) {
// 		2;
// 	} else {
// 		x.g() + 1;
// 	};
// 	// let total = 0 in for (i in range(12, x)) {
// 	// 	total += i;
// 	// };
// }
// print(f(if (false) new A()));